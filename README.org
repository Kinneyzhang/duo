
#+STARTUP: showall

* Table of contents                                                     :TOC_2_gh:
- [[#introduction][Introduction]]
  - [[#circular-lists][Circular lists]]
  - [[#next--previous-vs-after--before][Next / Previous vs After / Before]]
  - [[#assoc][Assoc]]

* Introduction

Duo is a library of in place list operations in Emacs-Lisp. Its functions modify the
original list when :

  - It’s easy to get back : rotate, reverse, move, etc

  - The name is clear : push, pop, add, drop, insert, remove, etc

    + When an element is removed, a reference to it is often returned

However, when it’s difficult or impossible to reverse the operation, a
new list is created, with references to the elements of the original
list when possible. For instance :

  - filter

  - filter-{previous,next,before,after}

If in doubt, check their doc.

In fact, the functions use and return references whenever possible.
It’s implemented with =(CAR . CDR)= =cons=, which are called =duo=,
hence the name of the library. These cons are everywhere in Elisp,
either explicitely created or in lists. A list variable =list= is
itself the cons at the beginning of the list. =(cdr list)= is the
second cons in the list. And so one with =(cddr list)=, =(nthcdr N
list)=. Generally speaking, a member of a list is a cons
=(value . next-member-in-list)=.

When a =duo= has to be modified, it’s generally by =setcar= and
=setcdr= built-in.


** Circular lists

Caution : apply some of these functions to circular lists would
produce infinite loops.

However, some functions, like =*-circ-*= or =*-rotate-*=, simulate
circular lists by :

  - Continuing at the beginning once arrived at the end

  - Continuing at the end once arrived at the beginning


** Next / Previous vs After / Before

There is a slight difference between next/previous and after/before
functions :

  - Next / Previous use a cons as landmark argument

  - After / Before use the value of an element of the list as landmark argument


** Assoc

The classic =assoc= function return the cons =(key . value)=, which is
the /value/ of the Alist element, whereas the =duo-assoc= function
return the duo =((key . value) . next-member-in-alist)=, real member of
the Alist.
